js
    - giving instrucrtor to a computer and the computer follows it 
        - called code 

document.body.innerHTML = 'hello';
    - erase all content of the page and replace with 'hello'
    - modify the webpage usage of JS 


Order of operations
* / are done first 
+ - are done after 
(operator precedence)
note:  
- have the same priority
- calculate from left to right if both present 
- () -> control which part gets done first 

Best practice when calculating money:
    = calculate in cents instead of dollars 
    ex.:
    dollars = 20.95 + 7.99
    cents   = 2095 + 799
    convert back to dollars: (2095 + 799) / 100 = 28.94 

note:
Calculations with floats are sometimes inaccurate.
When working with money:
1. Do the calculation in cents
2. Convert back to dollars 

How to round a number:


STRING
type coercion = automatic type conversion 
ex. 'hello' + 3 == 'hello3'
    - 3 is automatically converted to string 


character: 
1. letter (a, b, c)
2. number (1,2,3)
3. symbol (!,@,#)
4. Escape Character 
    - \' = count as a one character in str -> no meaning
        ex.: 'I\'m learning JS'
    - \" = double quote that is just text 
    - \n == newline character 


3 ways to create a string JS
1. '...' 
note:
- recommended to use '...' - used by default 
    - easier to read and type 
- but if there's a single quote in the str, used "..." 

2. "..."

3. `...` - backticks
    = template strings => str created with backticks 
        - has special features:
            a. interpolation -> insert a value directly into a string (interpolation > concatenation)
                ${} -> insert a value directly into a string -> format 
                ex.: `Items (${1 + 1}: $${(2095 + 799) / 100})`
                     'Items (2: $28.94)'
            b. Multi-line Strings
            ex.: `some
                  text`
            
            
'...' vs `...`
What should we used to create string?
1. Use '...' by default
2. If we need  interpolation, multi-line string use `...` 


VARIABLES
semicolon insertion 
    - js try to automatically assigned ; when it's not present 

Variable Re-assognment Shortcuts
+= 2    variable = variable + 2
-= 2    variable = variable - 2
*= 2    variable = variable * 2
/= 2    variable = variable / 2
++      variable = variable + 1
--      variable = variable - 1

typeof
    - to know the var type of a var
    
3 ways to create variable in JS
1. let
    - use let if need to change the value of var 
    - value can be change
2. const 
    - used by default
    - can't change its value later 
    - make var safer and easier to understand 
3. var 
    - variable
    - has some issues == not used anymore in modern JS




L6: BOOLEAN AND IF-STATEMENTS
BOOLEAN
 - true and false 

 purpose
 - represent whether something is true or false 

 comparison operators (has lower priority than math operators);
 ==
    - tries to convert both values to be the same type
 ===,!==
    -  to check if 2 values are the same
    - to avoid conversion behavior of == 

TRUTHY AND FALSY VALUES
truthy -> behave just like true
falsy ->  behave just like false
    falsy values 
        - false, 0, '', NaN (Not a Number -> occurs when invalid math happened), undefined, null 
        - any value not on this list is truthy 
why use truthy and falsy values?
    - used shortcut in our code

also works with logical operators



IF-STATEMENTS
- lets us write multiple groups of code
- and then decide which code to run 
- scope
    - a scope limits where a variable exists
    - avoid naming conflicts


shortcuts for if-statements
1. Ternary operator ?: -> it can be saved in a variable
2. Guard operator &&
    - ex. false && value2
    - stops early 
    - does not need to run the code on the right
    - it called "Short-circuit evaluation" 
3. Default operator || (OR)
    - value1 || value2
    - checks if at least 1 side is truthy




L7: FUNCTIONS
Function
    - a function lets us reuse code
    - makes updating code easy 

Return Statements 
    - lets us get a value out of a function
    - ends the function immediately
    - we can return:
        - value
        - calculation
        - variable
        - or anything that result in a value 

Tracing the code
    - following the code line-by-line 


Best practice
    - Keep variables inside a scope (if we can) 

Parameters
    - puts a value into a function
    - opposite of return 
    - only exists inside the function scope



L8: OBJECTS 
Objects
    - let us group multiple values together 
    - let us use multiple values together 
    - can save anytime of value inside an object

Property 
    - can be used to access value in the object
    - used to change the value 

Why use objects?
    - makes code more organized 

Dot notation
    - default way of accessing property value in objects 

Bracket notation
    - Bracket notation is use when properties don't work with dot notation 
    - inside the bracket, we can place: 
        - variable
        - calculation
        - another object
        - function
        - or anything that has a value 

Dot notation or bracket notation?
    - Dot notation -> use by default
    - Bracket notation -> for properties that don't work, use bracket notation

Method
    - function inside object 

2 More built-in Objects
1. JSON (JavaScript Object Notation)
    - a syntax 
    - similar to JS objects but has less features 
    - use double quotes (""), don't use functions 
    - JSON is more universal than JS objects (as JS object only exist in JS)

    Convert: JS object -> JSON

    We use JSON when:
        - we send data between computers 
        - we store data 

2. localStorage
    - save values more permanently 
    - it only supports string
    - localStorage.setItem();


    Saving in variable
        - storing in values in variables are temporary 
        - if page is refresh/close, all variables are deleted 

More details about objects
    - null 
        - used when intentionally want something to be empty
        - in some cases, null and undefined works the same 

Auto-Boxing
    - JS automatically wrap a string,numbers, and booleans in an object
    - not works in null or undefined

Remember: 
Objects are references. 
We can't compare objects directly.

Shortcuts for objects



L9: DOM (Document Object Model)
DOM
    - a built-in object called 'document object' 
        - the document object represents/model the webpage 
    - also has methods 
    - combines HTML AND JS together
    - we can have HTML elements inside JS 


    Methods (function saved inside an object)
    * document.querySelector()
        - get any element from the page and put it inside JS 
    
    note: 
        - every html element has a .innerHTML Property
        - onkeydown = '...' -> runs JS when we pressed keydown on keyboard
        - whenever we get a value from the DOM, the value will be a string 
    
    common practice:
        - start the class w/ 'js-' 
            - to make it clear that the class is being used in JavaScript
        - use 'Elem' / 'Element' at the end name of a var to make it clear that 
          there is an HTML element inside the var 

    Remember: 
        - clicks, keydowns => events
        - onclick, onkeydown => event listeners 
            - check for events 
            - and run JS when those events happened 
            - every event listener gets an event object 

Window Object
    - represents the browser 
    
        





    



